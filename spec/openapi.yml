openapi: 3.0.2

info:
  title: Sur Qui Ça Tombe ?
  version: "0.1"
  description: >
    Une belle API qui permet de gérer une liste d'utilisateur et de réaliser des tirages au sort.<br />
    Mais on ne sait pas sur qui ça va tomber ! ¯\_(ツ)_/¯

servers:
  - url: 'https://sqct.api.jrmv.net/v1'

components:
  parameters:
    filters:
      in: query
      name: filters
      description: The fields of the response to filter by
      required: false
      schema:
        type: object
        default: {}
      style: form
      explode: true
    user_id:
      in: path
      name: user_id
      required: true
      description: User LDAP nsUniqueId
      schema:
        type: string
    toss_id:
      in: path
      name: toss_id
      required: true
      description: Id of the toss
      schema:
        type: string
  requestBodies: {}
  responses:
    BadRequest:
      description: Malformed request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthenticated user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Insufficient rights
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: The requested resource has not been found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: auth.basic_auth
    admin:
      type: http
      scheme: basic
      x-basicInfoFunc: auth.admin_auth
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "The requested user 'toto' has not been found."
        status:
          type: string
          example: 404
        title:
          type: string
          example: "Not Found"
        type:
          type: string
          example: "about:blank"
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: pnom
        name:
          type: string
          example: John doe
        tosses:
          type: array
          items:
            $ref: "#/components/schemas/Toss"
    Toss:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 2e8251d8-8a81-4467-a0e8-85fcc4dc7b84
        name:
          type: string
          example: mco semaine 12 - 2020
        excludes:
          type: array
          items:
            type: string
            example: jdoe
        elected:
          type: string
          example: jdoe
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          example : "2017-07-21T17:32:28Z"
      required:
        - name
paths:
  /users:
    get:
      # tags: [user]
      description: |
        Gets the users.
      summary: Get users
      operationId: api.users.search
      parameters:
        - $ref: "#/components/parameters/filters"
      responses:
        "200":
          description: The requested users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
      security:
        - basic: ['secret']
  /users/{user_id}:
    get:
      # tags: [user]
      description: |
        Gets a user.
      summary: Get a user
      operationId: api.users.get
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: The requested user
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - basic: ['secret']
  /tosses:
    get:
      # tags: [user]
      description: |
        Gets the tosses.
      summary: Get tosses.
      operationId: api.tosses.search
      parameters:
        - $ref: "#/components/parameters/filters"
      responses:
        "200":
          description: The requested tosses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Toss"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - basic: ['secret']
    post:
      # tags: [admin]
      description: Creates a toss
      summary: Add a new toss
      operationId: api.tosses.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Toss"
      responses:
        "201":
          description: Toss created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Toss"
          headers:
            Location:
              description: Created toss URI
              schema:
                type: string
                format: uri
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
      security:
        - basic: ['secret']
  /tosses/{toss_id}:
    get:
      # tags: [user]
      description: |
        Gets details about a toss.
      summary: Get details about a toss
      operationId: api.tosses.get
      parameters:
        - $ref: "#/components/parameters/toss_id"
      responses:
        "200":
          description: The requested toss
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Toss"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - basic: ['secret']

    delete:
      # tags: [superadmin]
      description: |
        Deletes a toss.
      summary: Delete a toss
      operationId: api.tosses.delete
      parameters:
        - $ref: "#/components/parameters/toss_id"
      responses:
        "204":
          description: Successful deletion
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - admin: ['secret']